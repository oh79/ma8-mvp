# 프로젝트 개발 지침

## 코드 품질
- 모든 코드는 가독성 최우선, 단일 책임 원칙(SRP)을 준수합니다.
- 중복 코드는 최소화하고 재사용 가능한 함수/클래스로 분리합니다.
- 하드코딩 값은 상수(UPPER_SNAKE_CASE)로 분리합니다.

## 코드 스타일
- 들여쓰기는 공백 2칸으로 통일합니다.
- 한 줄 길이는 80자 이하로 유지합니다.
- 함수 및 변수 이름은 snake_case, 클래스는 PascalCase로 작성합니다.
- 주석은 '왜(why)'를 설명하는 수준으로 작성합니다.

## 문서화
- 모든 API 엔드포인트 및 주요 함수에는 docstring을 작성합니다.
- README.md에 프로젝트 설정, 실행 방법, 의존성 등을 상세 기술합니다.
- 복잡 로직/알고리즘은 별도 문서(docs/)에 작성하고 링크합니다.
- 변경 사항은 CHANGELOG.md에 기록합니다.

## 테스트
- 신규 기능마다 단위 테스트(pytest) 작성
- 테스트 커버리지 80% 이상 유지
- 테스트는 독립적으로 실행 가능하도록 작성

## 보안
- 사용자 입력은 항상 검증 및 이스케이프 처리
# - 민감 정보(토큰, 비밀번호)는 .env 또는 보안 저장소에서 관리
- SQL 인젝션, XSS 방어 로직을 반드시 구현

## 성능
- SQLite 인덱스 최적화로 쿼리 성능 향상
- 불필요한 API 호출 최소화
- 대용량 처리 시 배치/비동기 작업 고려

## 버전 관리
- 커밋 메시지는 설명적으로 작성
- 기능별 브랜치에서 개발 후 PR 리뷰 및 머지
- 메인 브랜치는 항상 배포 가능한 상태로 유지

## 네이밍 컨벤션
- **Python 모듈/스크립트**: snake_case.py (예: nlp_parse.py)
- **패키지(폴더)**: snake_case (예: streamlit_app)
- **클래스**: PascalCase (예: ScraperClient)
- **함수/변수**: snake_case (예: fetch_instagram_data)
- **상수**: UPPER_SNAKE_CASE (예: NUM_POSTS_TO_FETCH)

## 프로젝트 구조
```
ma8-mvp/
├── .env                   # 환경 변수 설정 파일
├── .gitignore             # Git 무시 파일 목록
├── .cursorrules           # 프로젝트 개발 지침
├── Dockerfile             # Docker 빌드 설정
├── requirements.txt       # 패키지 의존성 목록
├── README.md              # 프로젝트 설명서
├── pytest.ini             # pytest 설정
├── session.json           # 인스타그램 세션 캐시
├── config.yaml            # 스크래퍼 설정 파일
├── run_scraper.py         # 스크래퍼 실행 스크립트
├── run_scraper.sh         # 스크래퍼 실행 쉘 스크립트
├── verify_etl.py          # ETL 검증 스크립트
├── src/                   # 소스 코드 디렉토리
│   ├── app.py             # 메인 애플리케이션 파일
│   ├── streamlit_app.py   # Streamlit 애플리케이션 파일
│   ├── translate_payload.json
│   ├── embedding_payload.json
│   ├── api/               # API 관련 코드
│   │   ├── __init__.py
│   │   ├── routes/        # API 라우트
│   │   │   ├── __init__.py
│   │   │   ├── search.py
│   │   │   ├── ocr.py
│   │   │   ├── translation.py
│   │   │   └── embedding.py
│   │   └── utils/         # API 유틸리티
│   │       ├── __init__.py
│   │       └── api_utils.py
│   ├── core/              # 핵심 기능
│   │   ├── __init__.py
│   │   └── nlp.py
│   └── data/              # 데이터 처리
│       ├── __init__.py
│       ├── scraper.py     # 인스타그램 메인 스크래퍼 모듈
│       ├── api.py         # 인스타그램 API 클라이언트
│       ├── db.py          # 데이터베이스 관리
│       ├── config.py      # 설정 관리
│       ├── utils.py       # 유틸리티 함수
│       ├── etl.py         # ETL 처리
│       └── validation.py
├── data/                  # 데이터 파일 디렉토리
│   ├── instagram.db       # 인스타그램 데이터 DuckDB 파일
│   ├── mvp.db             # MVP SQLite 데이터베이스
│   ├── posts.csv          # 수집된 게시물 데이터
│   ├── influencers.csv    # 수집된 인플루언서 데이터
│   ├── crawler_checkpoint.csv # 체크포인트 데이터
│   ├── lens_influencers_test.txt # 테스트용 인플루언서 목록
│   ├── lens_influencers.txt # 인플루언서 타겟 목록
│   ├── meta.csv           # 임베딩 메타데이터
│   ├── vecs.npy           # 임베딩 벡터 데이터
│   ├── scraping_progress.json # 스크래핑 진행 상황
│   └── backup/            # 데이터 백업 디렉토리
├── scripts/               # 보조 스크립트 디렉토리
│   ├── embed.py
│   ├── clip_test.py
│   ├── ocr_test.py
│   └── ocr_api_test.py
├── samples/               # 샘플 데이터 디렉토리
│   ├── ocr/
│   │   ├── lens/
│   │   └── test/
│   └── texts/
├── logs/                  # 로그 파일 디렉토리
├── docs/                  # 문서 디렉토리
├── tests/                 # 테스트 코드 디렉토리
│   ├── test_ocr_api.py
│   └── test_image_for_api.jpg
└── .venv/                 # 가상 환경 (버전 관리 제외)
```

## 변경 이력

### 2025-05-08 - 스크래퍼 모듈화 및 인코딩 문제 해결
- 기존 스크래퍼 코드를 모듈화하여 유지보수성 향상
  - `src/data/api.py`: 인스타그램 API 관련 기능
  - `src/data/db.py`: 데이터베이스 관리
  - `src/data/config.py`: 설정 관리
  - `src/data/utils.py`: 유틸리티 함수
- 로그 파일 인코딩 문제 해결 
  - `RotatingFileHandler`로 변경 및 UTF-8 인코딩 명시
  - Windows 환경에서 표준 출력/오류 스트림의 인코딩 설정
- DuckDB 관련 오류 해결
  - HttpUrl 객체를 문자열로 변환하는 로직 추가
  - 데이터 타입 변환 관리 개선
- 스크래퍼 실행 안정성 개선
  - 중간 저장 기능 강화 (시그널 핸들러)
  - 백그라운드 모니터링 추가
  - 설정 파일(config.yaml) 도입